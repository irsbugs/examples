{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Examples Links: Github or Website Example code for illustrating programming in Python. For licensing see individual projects.","title":"Examples"},{"location":"#examples","text":"Links: Github or Website Example code for illustrating programming in Python. For licensing see individual projects.","title":"Examples"},{"location":"crossword_cracker/","text":"Crossword Puzzle or Code Cracker Tool Links: Github or Website Introduction This program is designed to be an aid to solving crossword or code cracker puzzles. For example, if you know a word is 11 letters in length and starts and ends with the letter \"w\", then the program will show that the only word to meets this criteria is \"wheelbarrow\". The program uses the tkinter GUI. Radio buttons are placed into two lists. The index of the list is used to point to specific buttons. The selection from one group of radio buttons is passed to the selected button in the other group. A dictionary of English words is used. Based on a given word length and using the main buttons with characters inserted as filters, all words that match are displayed. Statistics on the number of words that match and the duration taken are displayed. Files crossword_cracker.py dictionary-british-english New Zealand - NCEA. The New Zealand secondary school curriculum includes the subject Digital Technologies. This program may serve as an introductory guide for writing a program to meet the specifications of the NCEA Level3 Digital Technologies Unit 91637 titled \"Develop a complex computer program for a specified task\". Ian Stewart - 2014 November This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Crossword Puzzle or Code Cracker Tool"},{"location":"crossword_cracker/#crossword-puzzle-or-code-cracker-tool","text":"Links: Github or Website","title":"Crossword Puzzle or Code Cracker Tool"},{"location":"crossword_cracker/#introduction","text":"This program is designed to be an aid to solving crossword or code cracker puzzles. For example, if you know a word is 11 letters in length and starts and ends with the letter \"w\", then the program will show that the only word to meets this criteria is \"wheelbarrow\". The program uses the tkinter GUI. Radio buttons are placed into two lists. The index of the list is used to point to specific buttons. The selection from one group of radio buttons is passed to the selected button in the other group. A dictionary of English words is used. Based on a given word length and using the main buttons with characters inserted as filters, all words that match are displayed. Statistics on the number of words that match and the duration taken are displayed.","title":"Introduction"},{"location":"crossword_cracker/#files","text":"crossword_cracker.py dictionary-british-english","title":"Files"},{"location":"crossword_cracker/#new-zealand-ncea","text":"The New Zealand secondary school curriculum includes the subject Digital Technologies. This program may serve as an introductory guide for writing a program to meet the specifications of the NCEA Level3 Digital Technologies Unit 91637 titled \"Develop a complex computer program for a specified task\". Ian Stewart - 2014 November This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"New Zealand - NCEA."},{"location":"embedded_data/","text":"Embedded Data in a Python Program Links: Github or Website A Python Program that creates a Python Program which includes Embedded Data A python3 program that is used to read string data from a file where the data is newline delimited. E.g. The word list from a dictionary file, which on many linux systems is /usr/share/dict/british-english or /usr/share/dict/american-english The list of words is converted to bytes, compressed and converted to a string of hex characters. The length of the hex string is approximately half the size of the original word list. A new python3 program is created with this hex data embedded in the program. On launching the new program it will access its embedded hex data and present this data as a list. The intension is that the new program is edited and you create your own application which utilizes the list extracted from the embedded data. Files embedded_data.py MIT Licence Ian Stewart - 2016 August","title":"Embedded Data in a Python Program"},{"location":"embedded_data/#embedded-data-in-a-python-program","text":"Links: Github or Website","title":"Embedded Data in a Python Program"},{"location":"embedded_data/#a-python-program-that-creates-a-python-program-which-includes-embedded-data","text":"A python3 program that is used to read string data from a file where the data is newline delimited. E.g. The word list from a dictionary file, which on many linux systems is /usr/share/dict/british-english or /usr/share/dict/american-english The list of words is converted to bytes, compressed and converted to a string of hex characters. The length of the hex string is approximately half the size of the original word list. A new python3 program is created with this hex data embedded in the program. On launching the new program it will access its embedded hex data and present this data as a list. The intension is that the new program is edited and you create your own application which utilizes the list extracted from the embedded data.","title":"A Python Program that creates a Python Program which includes Embedded Data"},{"location":"embedded_data/#files","text":"embedded_data.py MIT Licence Ian Stewart - 2016 August","title":"Files"},{"location":"evolution/","text":"Evolution of a Python Program Links: Github or Website Presentation Slide show evolution_of_a_python_program.opd A LibreOffice Impress presentation slide show. The objective of this presentation is to help with educating those who are new to writing python programs. It demonstrates how a python program evolves to have a structure that provides ease of comprehension of the code, built in documentation and testing, and meets PEP8 standards, etc. The presentation contains an appendix to provide an explanation of the some of the code that is added as the program evolves. The presentation contains snippets of the code from the files listed below. Files circle_01.py through to circle_10.py . These programs all calculate the area of a circle. circle_01.py is the simplist python code. Each program then adds enhancements to the previous program. main_prog_04.py and main_prog_05.py are programs that demonstrate the ability to import as modules circle_04.py and circle_05.py . main_prog_05_test.py imports circle_05_test.py . These programs demonstrate that circle_05_test.py will normally be a module for main_prog_05_test.py . However circle_05_test.py has the ability to use doctest in its docstring to test its function is calculating correctly. Appendix 5 of the presentation describes the use of doctest . sys_argv_example.py is a program designed to demonstrate how the sys module has the ability to provide a list of the arguments from the command line. float_input.py . In the main slide show presentation there wasn't the space on the slides to show a good method of capturing either an integer or floating point value from a user. This snippet of code provides a more reliable way to capture this user input. First presented at Hamilton Python User Group meeting by Ian Stewart - 12 September 2016","title":"Evolution of a Python Program"},{"location":"evolution/#evolution-of-a-python-program","text":"Links: Github or Website","title":"Evolution of a Python Program"},{"location":"evolution/#presentation-slide-show","text":"evolution_of_a_python_program.opd A LibreOffice Impress presentation slide show. The objective of this presentation is to help with educating those who are new to writing python programs. It demonstrates how a python program evolves to have a structure that provides ease of comprehension of the code, built in documentation and testing, and meets PEP8 standards, etc. The presentation contains an appendix to provide an explanation of the some of the code that is added as the program evolves. The presentation contains snippets of the code from the files listed below.","title":"Presentation Slide show"},{"location":"evolution/#files","text":"circle_01.py through to circle_10.py . These programs all calculate the area of a circle. circle_01.py is the simplist python code. Each program then adds enhancements to the previous program. main_prog_04.py and main_prog_05.py are programs that demonstrate the ability to import as modules circle_04.py and circle_05.py . main_prog_05_test.py imports circle_05_test.py . These programs demonstrate that circle_05_test.py will normally be a module for main_prog_05_test.py . However circle_05_test.py has the ability to use doctest in its docstring to test its function is calculating correctly. Appendix 5 of the presentation describes the use of doctest . sys_argv_example.py is a program designed to demonstrate how the sys module has the ability to provide a list of the arguments from the command line. float_input.py . In the main slide show presentation there wasn't the space on the slides to show a good method of capturing either an integer or floating point value from a user. This snippet of code provides a more reliable way to capture this user input. First presented at Hamilton Python User Group meeting by Ian Stewart - 12 September 2016","title":"Files"},{"location":"ncea_level2/snippets/","text":"Code Snippets for Python - Level 2 Links: Github or Website These code snippets may be useful for anyone who is learning the Python programming language. Their level of complexity is to encourage the use of the procedural programming style. They highlight development of function code blocks, but do not cover developing classes. They also assume the program is written as one file, and importing of modules is restricted to a small set of the builtin python modules. The programs are all console terminal based and there is no use of GUI windowing. Linux and Windows10 (with TH2 update kit) console terminal windows support ANSI 3.64 escape sequences. This allows direct cursor addressing and setting foreground and backgound colours of each character cell. Also the unicode Box Drawing graphic characters are supported. Some of these snippet programs highlight these features. The snippets were developed using Python 3.4. They have been tested on Ubuntu Linux and Windows10 desktop environments. New Zealand secondary school teachers and students may find these snippets useful for the Digital Technologies, Level 2, Achievement Standards 91372 and 91373 . In a classroom computer lab that uses Windows10 desktop computers, the console terminal window applications (CMD and Powershell) may have been made unavailable on the students desktop computers. In the Windows10 file manager, if a python file is double-clicked it will launch a terminal window to run the python program. When the program completes, this terminal window is closed. To prevent the programs closing before a student has been able to see what the program does, all these snippet programs end with the lines... input(\"Press Enter key to end the program.\") sys.exit() Below is a list of the snippet programs and a brief description of their functionality. snip_l2_01_a.py Import time and use sleep() for 5 seconds. snip_l2_01_b.py Import time and use sleep() for the amount of time in seconds specified by the constant 'S'. Uses .format() function with print(). snip_l2_01_c.py Import time and use sleep() for the the number of seconds of the 'DELAY' constant. DELAY is a more meaningful name to the constant than using the letter 'S'. Uses .format() function with print(). snip_l2_01_d.py Import time and use sleep() for the the number of seconds of the 'delay' variable. The input() function is used to get the desired delay from the user. Uses .format() function with print(). snip_l2_01_e.py Import time and use sleep() for the the number of seconds of the 'DELAY_IN_SECS' constant. Define a function to perform the delay. Note that within the function it can use the DELAY_IN_SECS constant that was previously set outside of the function. i.e. The function does not require being passed the DELAY_IN_SEC constant. Uses .format() function with print(). snip_l2_01_f.py Introduce procedural programming style. Use if __name__ == \"__main__\": to start the program and call the main() function. Uses .format() function with print(). The first argument of the list sys.argv, i.e. sys.argv[0] is the programs name. i.e. snip_l2_01_e.py The time.sleep(5) provides a 5 second delay. snip_l2_02_a.py Import time and sleep for the number of seconds of the 'DELAY_IN_SECS' constant. Log the start and end of the program to a logging file. Use log_file = open(), log_file.write() and log_file.close() Simple flow programming style. snip_l2_02_b.py Import time and use sleep() for the number of seconds of the 'DELAY_IN_SECS' constant. Log the start and end of the program to a log file. Use 'with' in opening output file which means the log_file.close() is not required. Simple flow programming style. snip_l2_02_c.py Import time and use sleep() for the number of seconds of the 'DELAY_IN_SECS' constant. Use a function to log the start and end of the program to a logging file. snip_l2_03_a.py Import time and use sleep(1) for one second intervals to provide a countdown. Use a for loop. Need to subtract from 5 to countdown to 0. snip_l2_03_b.py Import time and sleep for one second to provide a countdown. Use for loop. Use reversed() on the range() to count down to 0. snip_l2_03_c.py Import time and sleep for one second to provide a countdown. Use for loop. Call a function to to print the countdown. snip_l2_03_d.py Import time and use sleep() for one second to provide a countdown. Use for loop. Call a print function. Use plural seconds, and singular on 1 second. snip_l2_04_a.py Use default integer value or get a string value from the command line. Use three methods, type comparison, isinstance() and try/except. snip_l2_05_a.py Use input () function to get data from the User at the command line. Use while True loop to ensure data is entered or data is of the desired type. snip_l2_05_b.py Use input () function to get data from the User at the command line. Use while True loop to ensure data is entered or data is of the desired type. Apply format() function to the input() function. Simple flow programming style. snip_l2_05_c.py Define a function to get data from the User at the command line. Use while True loop to ensure data is entered or data is of the desired type. Apply format() function to the input() function. Read the global constants TEXT and PROMPT rather than pass them to function. Simple flow programming. Calls one function. snip_l2_05_d.py Define a function to get data from the User at the command line. Use while True loop to ensure data is entered or data is of the desired type. Apply format() function to the input() function. Use variables to hold text and prompt strings and pass them to the function. Simple program flow. One function. snip_l2_05_e.py Define a function to get data from the User at the command line. Use 'while True' loop to ensure data is entered or data is of the desired type. Apply format() function to the input() function. Use variables to hold text and prompt strings and pass them to the function. Allow command line options to change prompt and text of input() function snip_l2_06_a.py Define a function to get data from the User at the command line. Use 'while True' loop to ensure data is entered or data is of the desired type. i.e. Integer. Apply format() function to the input() function. Use variables to hold text and prompt strings and pass them to the function. Allow command line options to change prompt and text of input() function snip_l2_06_b.py Define a function to get data from the User at the command line. Use 'while True' loop to ensure data is entered or data is of the desired type. i.e. Integer. If integer is negative return as positive. ie. abs() Apply format() function to the input() function. Use variables to hold text and prompt strings and pass them to the function. Allow command line options to change prompt and text of input() function. snip_l2_06_c.py Define a function to get data from the User at the command line. Use 'while True' loop to ensure data is entered or data is of the desired type. Get integer, positive integer, float. Apply format() function to the input() function. A main() function is defined to call the other functions. snip_l2_06_d.py Define a function to get data from the User at the command line. Use 'while True' loop to ensure data is entered or data is of the desired type. Get and integer, get any integer return a positive integer, or get integer or float and return a float. Apply format() function to the input() function. A main() function is defined to call the other functions. Enable debugging with -d or --debug commadn line option. Procedural programming style. snip_l2_07_a.py Circle calculations. Enter the radius. Calculate circumference and area of the circle. Use 3.1415 within the calculations for value of Pi. Simple flow programming style. snip_l2_07_b.py Circle calculations. Enter the radius. Calculate circumference and area of the circle. Use a constant of 3.1415 for PI. Simple flow programming style. snip_l2_07_c.py Circle calculations. Enter the radius. Calculate circumference and area of the circle. Import math and use math.pi for the constant for PI. Simple flow programming. snip_l2_07_d.py Circle calculations. Enter the radius. Calculate circumference and area of the circle. Use math.pi Call the float input function. No formatting of the calculated values Simple flow programming style. Only calls input of radius function. snip_l2_07_e.py Circle calculations. Enter the radius. Use functions to calculate circumference and area of the circle. Use math.pi Use a float input function. No formatting of the calculated values. Simple flow programming, but calling 3 x functions. snip_l2_07_f.py Circle calculations. Enter the radius. Use functions to calculate circumference and area of the circle. Use math.pi Use a float input function. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. snip_l2_07_g.py Circle calculations. Enter the radius. Use one function to calculate circumference and area of the circle. Use math.pi Use a float input function. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Procedural programming style. snip_l2_08_a.py Sphere calculations. Enter the radius. Calculate surface area and volume of a shpere. Use math.pi formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Sphere Formulas A = 4 Pi r**2 V = 4/3 Pi r**3 Simple flow programming style. snip_l2_08_b.py Sphere calculations. Enter the radius. Calculate surface area and volume of a shpere. Use math.pi Use a float input function and functions to calculate surface area and volume. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Procedural programming style snip_l2_09_a.py Cube calculations. Enter the length of an edge. Calculate surface area, volume and internal diagonal. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Cube algorithms surface = 6 * edge ^2 volume = edge ^3 diagonal through the space of the cube = square root 3 * edge Simple flow programming style snip_l2_09_b.py Cube calculations. Enter the length of an edge. Calculate surface area, volume and internal diagonal using functions. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Procedural programming style. snip_l2_09_c.py Cube calculations. Enter the length of an edge. Calculate surface area, volume and internal diagonal using one function. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Procedural programming style. snip_l2_10_a.py Get integer entry as radius. Use functions to calculate diameter, circumference and area of circle. Use iteration and output data each loop. snip_l2_10_b.py Get integer entry as radius. Use functions to calculate diameter, circumference and area of circle. Use iteration and output data each loop. Procedural programming style. snip_l2_11_a.py Get integer entry as radius. Calculate circumference, surface area and volume of sphere. Use iteration and output data each loop. Simple programming flow. snip_l2_11_b.py Get integer entry as radius. Use functions to calculate circumference, surface area and volume of sphere. Use iteration and output data each loop. Procedural programming style. snip_l2_12_a.py Get integer entry for cubic meters. Calculate radius, diameter, and circumference in meters, of sphere holding this volume. Use iteration and output data for each loop. Simple programming flow. snip_l2_12_b.py Get integer entry for cubic meters. Use functions to calculate radius, diameter, and circumference in meters, of sphere holding this volume. Use iteration and output data for each loop. Procedural programming style. snip_l2_13_a.py Get integer entry for litres. Calculate radius, diameter, and circumference in centimeters, of sphere holding this volume. Use iteration and output data for each loop. Simple programming flow. snip_l2_13_b.py Get integer entry for litres. Use functions to calculate radius, diameter, and circumference in centimeters, of sphere holding this volume. Requires multiplying the radius formula by 10 Use iteration and output data for each loop. Procedural programming style. snip_l2_14_a.py Get integer entry as radius. Calculate diameter, circumference and area of circle. Use iteration and output data each loop. Output the data to a .csv file, suitable for reading into a spreadsheet Simple programming flow. snip_l2_14_b.py Get integer entry as radius. Use functions to calculate diameter, circumference and area of circle. Use iteration and output data each loop. Generates the comma seperated value output file snip_l2_14_b.csv. Procedural programming style. snip_l2_14_c.py Get integer entry as radius. Use functions to calculate diameter, circumference and area of circle. Use iteration and output data each loop. Calls function to generates the comma seperated value output file snip_l2_14_c.csv. Procedural programming style. snip_l2_15_a.py Get integer entry as cube edge length. Calculate cube surface area, volume and the lenght of the internal diagonal. Use iteration and output data each loop. Output the data to a .csv file, suitable for reading into a spreadsheet snip_l2_15_b.py** Get integer entry as cube edge length. Use functions to calculate cube surface area, volume and the lenght of the internal diagonal. Use iteration and output data each loop. Output the data to a .csv file, suitable for reading into a spreadsheet. snip_l2_15_c.py Get integer entry as cube edge length. Use functions to calculate cube surface area, volume and the lenght of the internal diagonal. Use iteration and output data each loop. Output the data to a .csv file, suitable for reading into a spreadsheet. snip_l2_16_a.py Produce the Fibonacci series. Get integer for how many in the series to produce. As these are integers, they are accurately produced to infinite. snip_l2_16_b.py Produce the Fibonacci series. Get integer for how many in the series to produce. As these are integers, they are accurately produced to infinite. Enumerate the sequence and use commas in the numeric display. snip_l2_17_a.py Demonstration of large integers and integer operators. Multiplication *, Exponent **, Addition +, and Modulus % snip_l2_17_b.py Continuing demonstration of large integers and integer operators. Multiplication *, Exponent **, Addition + snip_l2_17_c.py Continuing demonstration of large integers and integer operators. Addition +, Subtraction -, and Exponent ** snip_l2_17_d.py Continuing demonstration of large integers and integer operators. Integer Division //, and Modulo % snip_l2_18_a.py Real scenario demonstration of large integers and integer operators. Addition +, Multiplicaton *, Integer Division //, Modulo % snip_l2_18_b.py Introduce the float type. Multiplying by a floating point decimal. Addition +, Multiplication * snip_l2_19_a.py Bicycle pedding cadence and sprocket ratios to determine speeds in each gear. Introduces list[] and for loop iterating over a list. Simple programming flow style. snip_l2_19_b.py Bicycle pedding cadence and sprocket ratios to determine speeds in each gear using functions. Introduces list[] and for loop iterating over a list. Written in procedural programming style snip_l2_20_a.py Floating point. Demonstration of adding 0.1 snip_l2_20_b.py Floating point. Demonstration of 1/10, while is equal to 0.1 in decimal is in binary 0.00011 and then infinately recurring 0011. snip_l2_20_c.py Floating point. Demonstration Max positve value of float. snip_l2_21_a.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime int(math.sqrt(integer_under_test)) snip_l2_21_b.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime int(math.sqrt(integer_under_test)) Provide statistics and better listing. snip_l2_21_c.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime int(math.sqrt(integer_under_test)) Provide heading and include count of number of modulo operations. Include the time taken to perform the calculations snip_l2_21_d.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime int(math.sqrt(integer_under_test)) Provide heading with number of primes located Include the time taken to perform the calculations Procedural programming style. snip_l2_21_e.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime int(math.sqrt(integer_under_test)) Provide heading with number of primes located. Include the time taken to perform the calculations. Include count of number of recursive modulo operations Procedural programming style. snip_l2_21_f.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime. int(math.sqrt(integer_under_test)) Provide heading with number of primes located. Include the time taken to perform the calculations. Include count of number of recursive modulo operations Include Progress Bar Procedural programming style. snip_l2_22_a.py Based on the length of an edge of a tetrahedron provide the dimensions. Tetrahedron a = edge Volume = a^3/(6 sqrt(2) Area = sqrt(3) a^2 Face Area = (sqrt(3)/4) a^2 Height = sqrt(2/3) a snip_l2_23_a.py Demostrate ANSI escape sequences on a console. Including Microsoft Win10. By default, most Linux consoles support the ANSI escape sequences. Windows 10, since May 2016, supports a subset of ANSI escape sequences, for the CMD and Powershell console windows. On Windows this functionality is turned off by default. Enabling the ANSI escape sequences in Win10 can be performed by python: import ctypes kernel32 = ctypes.windll.kernel32 kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7) See notes section for links on ANSI escape sequences. snip_l2_23_b.py Demonstrate ANSI escape sequences for direct cursor addressing and setting forground and back ground colours on a console. Perform line drawing on a console using the box drawing character set. On Microsoft Windows console this is better than using the ANSI escape sequence box drawing as it is missing the ability to do the cross-hairs. Draw vertical bars of colour and indicates their numeric colour value. A draw_rectangle function has the arguments (x, y, width,height, foreground colour, background colour). Also sets the console windows title with ESC ] 2 ; <string> BEL snip_l2_23_c.py Demonstrate ANSI escape sequences for direct cursor addressing and setting forground and back ground colours on a console. Perform line drawing on a console using the box drawing character set. On Microsoft Windows console this is better than using the ANSI escape sequence box drawing as it is missing the ability to do the cross-hairs. Draw reducing sized rectangles in different colours. Use print(EscapeSequence, end=\"\", flush=True) to prevent newline character. Functions: draw_rectangle(), colour_check(), write_text() Also added COLOUR as a read-only dictionary to convert colour names to numeric string for the colour. If invalid colour data then remain with the default console colours. Sets the console windows title with ESC ] 2 ; <string> BEL snip_l2_23_d.py Demonstrate ANSI escape sequences for direct cursor addressing and setting forground and back ground colours on a console. Perform line drawing on a console using the box drawing character set. On Microsoft Windows console this is better than using the ANSI escape sequence box drawing as it is missing the ability to do the cross-hairs. Draw: Dummy form and Pizza Order form. Proceedural functions: main(), form_1(), pizza_form() Called functions() escape_sequence_check() - To check if Win10 is at the correct version draw_rectangle() draw_horizontal_line() draw_vertical_line() draw_intersection_line() colour_check() - Check if colour value is valid or translate text of colour to numeric value. write_text() - Direct cursor addressing of text strings snip_l2_23_e.py Demonstrate ANSI escape sequences for direct cursor addressing and setting forground and back ground colours on a console. Perform line drawing on a console using the box drawing character set. On Microsoft Windows console this is better than using the ANSI escape sequence box drawing as it is missing the ability to do the cross-hairs. Introduce write_field() function. Proceedural functions: main() Called functions() escape_sequence_check() - To check if Win10 is at the correct version draw_rectangle() draw_horizontal_line() draw_vertical_line() draw_intersection_line() colour_check() - Check if colour value is valid or translate text of colour to numeric value. write_text() - Direct cursor addressing of text strings write_field() - Includes length and alignment of text in the field snip_l2_24_a.py Review the character set to determine if it includes the box drawing set of characters. snip_l2_24_b.py Draw four styles of boxes from the Unicode Box Drawing set of characters. snip_l2_24_c.py Making use of Direct Cursor addressing, and colour. Line Drawing is part of the ASCII character set. Does not require ANSI escape sequences to perform the drawing. Supported on Windows 10 patched to May 2016 revision or later. Uses methods for each line drawing graphic character. Uses single line. Procedural functions: main(), setup_initial_screen(), get_continue(), get_first_name(), get_surname(), get_gender(), get_age(), get_fruit(), get_drink(), insert_time(), and generate_report(data_list). escape_sequence_check() - To check if Win10 is at the correct version. colour_check() - Check if colour value is valid or translate text of colour to numeric value. write_text() - Direct cursor addressing of text strings write_field() - Includes length and alignment of text in the field menu_selection() - Provide a sub-menu in the middle of the screen clear_area() - Clear the sub menu clear_line_23() - Line 23 is used for input get_integer() - Get integer value from user get_string() - Get string from user. Main methods for drawing boxes. These call the 11 x methods below draw_box(), draw_box_horizontal(), draw_box_vertical 11 x methods are included to be called by other methods for line drawing. Colour checking and turning on/off line drawing is not performed. draw_horizontal(), draw_vertical() draw_top_left(), draw_top_right(), draw_bottom_left(), draw_bottom_right() draw_top_t(), draw_bottom_t(), draw_left_t(), draw_right_t() draw_intersection() snip_l2_24_d.py Making use of Direct Cursor addressing, and colour. Line Drawing is part of the ASCII character set. Does not require ANSI escape sequences to perform the drawing. Supported on Windows 10 patched to May 2016 revision or later. Uses methods for each line drawing graphic character. Uses double lines. Procedural functions: main(), setup_initial_screen(), get_continue(), get_first_name(), get_surname(), get_gender(), get_age(), get_fruit(), get_drink(), insert_time(), and generate_report(data_list). escape_sequence_check() - To check if Win10 is at the correct version. colour_check() - Check if colour value is valid or translate text of colour to numeric value. write_text() - Direct cursor addressing of text strings write_field() - Includes length and alignment of text in the field menu_selection() - Provide a sub-menu in the middle of the screen clear_area() - Clear the sub menu clear_line_23() - Line 23 is used for input get_integer() - Get integer value from user get_string() - Get string from user. Main methods for drawing boxes. These call the 11 x methods below draw_box(), draw_box_horizontal(), draw_box_vertical 11 x methods are included to be called by other methods for line drawing. Colour checking and turning on/off line drawing is not performed. draw_horizontal(), draw_vertical() draw_top_left(), draw_top_right(), draw_bottom_left(), draw_bottom_right() draw_top_t(), draw_bottom_t(), draw_left_t(), draw_right_t() draw_intersection()","title":"Code Snippets for Python - Level 2"},{"location":"ncea_level2/snippets/#code-snippets-for-python-level-2","text":"Links: Github or Website These code snippets may be useful for anyone who is learning the Python programming language. Their level of complexity is to encourage the use of the procedural programming style. They highlight development of function code blocks, but do not cover developing classes. They also assume the program is written as one file, and importing of modules is restricted to a small set of the builtin python modules. The programs are all console terminal based and there is no use of GUI windowing. Linux and Windows10 (with TH2 update kit) console terminal windows support ANSI 3.64 escape sequences. This allows direct cursor addressing and setting foreground and backgound colours of each character cell. Also the unicode Box Drawing graphic characters are supported. Some of these snippet programs highlight these features. The snippets were developed using Python 3.4. They have been tested on Ubuntu Linux and Windows10 desktop environments. New Zealand secondary school teachers and students may find these snippets useful for the Digital Technologies, Level 2, Achievement Standards 91372 and 91373 . In a classroom computer lab that uses Windows10 desktop computers, the console terminal window applications (CMD and Powershell) may have been made unavailable on the students desktop computers. In the Windows10 file manager, if a python file is double-clicked it will launch a terminal window to run the python program. When the program completes, this terminal window is closed. To prevent the programs closing before a student has been able to see what the program does, all these snippet programs end with the lines... input(\"Press Enter key to end the program.\") sys.exit() Below is a list of the snippet programs and a brief description of their functionality. snip_l2_01_a.py Import time and use sleep() for 5 seconds. snip_l2_01_b.py Import time and use sleep() for the amount of time in seconds specified by the constant 'S'. Uses .format() function with print(). snip_l2_01_c.py Import time and use sleep() for the the number of seconds of the 'DELAY' constant. DELAY is a more meaningful name to the constant than using the letter 'S'. Uses .format() function with print(). snip_l2_01_d.py Import time and use sleep() for the the number of seconds of the 'delay' variable. The input() function is used to get the desired delay from the user. Uses .format() function with print(). snip_l2_01_e.py Import time and use sleep() for the the number of seconds of the 'DELAY_IN_SECS' constant. Define a function to perform the delay. Note that within the function it can use the DELAY_IN_SECS constant that was previously set outside of the function. i.e. The function does not require being passed the DELAY_IN_SEC constant. Uses .format() function with print(). snip_l2_01_f.py Introduce procedural programming style. Use if __name__ == \"__main__\": to start the program and call the main() function. Uses .format() function with print(). The first argument of the list sys.argv, i.e. sys.argv[0] is the programs name. i.e. snip_l2_01_e.py The time.sleep(5) provides a 5 second delay. snip_l2_02_a.py Import time and sleep for the number of seconds of the 'DELAY_IN_SECS' constant. Log the start and end of the program to a logging file. Use log_file = open(), log_file.write() and log_file.close() Simple flow programming style. snip_l2_02_b.py Import time and use sleep() for the number of seconds of the 'DELAY_IN_SECS' constant. Log the start and end of the program to a log file. Use 'with' in opening output file which means the log_file.close() is not required. Simple flow programming style. snip_l2_02_c.py Import time and use sleep() for the number of seconds of the 'DELAY_IN_SECS' constant. Use a function to log the start and end of the program to a logging file. snip_l2_03_a.py Import time and use sleep(1) for one second intervals to provide a countdown. Use a for loop. Need to subtract from 5 to countdown to 0. snip_l2_03_b.py Import time and sleep for one second to provide a countdown. Use for loop. Use reversed() on the range() to count down to 0. snip_l2_03_c.py Import time and sleep for one second to provide a countdown. Use for loop. Call a function to to print the countdown. snip_l2_03_d.py Import time and use sleep() for one second to provide a countdown. Use for loop. Call a print function. Use plural seconds, and singular on 1 second. snip_l2_04_a.py Use default integer value or get a string value from the command line. Use three methods, type comparison, isinstance() and try/except. snip_l2_05_a.py Use input () function to get data from the User at the command line. Use while True loop to ensure data is entered or data is of the desired type. snip_l2_05_b.py Use input () function to get data from the User at the command line. Use while True loop to ensure data is entered or data is of the desired type. Apply format() function to the input() function. Simple flow programming style. snip_l2_05_c.py Define a function to get data from the User at the command line. Use while True loop to ensure data is entered or data is of the desired type. Apply format() function to the input() function. Read the global constants TEXT and PROMPT rather than pass them to function. Simple flow programming. Calls one function. snip_l2_05_d.py Define a function to get data from the User at the command line. Use while True loop to ensure data is entered or data is of the desired type. Apply format() function to the input() function. Use variables to hold text and prompt strings and pass them to the function. Simple program flow. One function. snip_l2_05_e.py Define a function to get data from the User at the command line. Use 'while True' loop to ensure data is entered or data is of the desired type. Apply format() function to the input() function. Use variables to hold text and prompt strings and pass them to the function. Allow command line options to change prompt and text of input() function snip_l2_06_a.py Define a function to get data from the User at the command line. Use 'while True' loop to ensure data is entered or data is of the desired type. i.e. Integer. Apply format() function to the input() function. Use variables to hold text and prompt strings and pass them to the function. Allow command line options to change prompt and text of input() function snip_l2_06_b.py Define a function to get data from the User at the command line. Use 'while True' loop to ensure data is entered or data is of the desired type. i.e. Integer. If integer is negative return as positive. ie. abs() Apply format() function to the input() function. Use variables to hold text and prompt strings and pass them to the function. Allow command line options to change prompt and text of input() function. snip_l2_06_c.py Define a function to get data from the User at the command line. Use 'while True' loop to ensure data is entered or data is of the desired type. Get integer, positive integer, float. Apply format() function to the input() function. A main() function is defined to call the other functions. snip_l2_06_d.py Define a function to get data from the User at the command line. Use 'while True' loop to ensure data is entered or data is of the desired type. Get and integer, get any integer return a positive integer, or get integer or float and return a float. Apply format() function to the input() function. A main() function is defined to call the other functions. Enable debugging with -d or --debug commadn line option. Procedural programming style. snip_l2_07_a.py Circle calculations. Enter the radius. Calculate circumference and area of the circle. Use 3.1415 within the calculations for value of Pi. Simple flow programming style. snip_l2_07_b.py Circle calculations. Enter the radius. Calculate circumference and area of the circle. Use a constant of 3.1415 for PI. Simple flow programming style. snip_l2_07_c.py Circle calculations. Enter the radius. Calculate circumference and area of the circle. Import math and use math.pi for the constant for PI. Simple flow programming. snip_l2_07_d.py Circle calculations. Enter the radius. Calculate circumference and area of the circle. Use math.pi Call the float input function. No formatting of the calculated values Simple flow programming style. Only calls input of radius function. snip_l2_07_e.py Circle calculations. Enter the radius. Use functions to calculate circumference and area of the circle. Use math.pi Use a float input function. No formatting of the calculated values. Simple flow programming, but calling 3 x functions. snip_l2_07_f.py Circle calculations. Enter the radius. Use functions to calculate circumference and area of the circle. Use math.pi Use a float input function. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. snip_l2_07_g.py Circle calculations. Enter the radius. Use one function to calculate circumference and area of the circle. Use math.pi Use a float input function. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Procedural programming style. snip_l2_08_a.py Sphere calculations. Enter the radius. Calculate surface area and volume of a shpere. Use math.pi formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Sphere Formulas A = 4 Pi r**2 V = 4/3 Pi r**3 Simple flow programming style. snip_l2_08_b.py Sphere calculations. Enter the radius. Calculate surface area and volume of a shpere. Use math.pi Use a float input function and functions to calculate surface area and volume. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Procedural programming style snip_l2_09_a.py Cube calculations. Enter the length of an edge. Calculate surface area, volume and internal diagonal. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Cube algorithms surface = 6 * edge ^2 volume = edge ^3 diagonal through the space of the cube = square root 3 * edge Simple flow programming style snip_l2_09_b.py Cube calculations. Enter the length of an edge. Calculate surface area, volume and internal diagonal using functions. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Procedural programming style. snip_l2_09_c.py Cube calculations. Enter the length of an edge. Calculate surface area, volume and internal diagonal using one function. formats {:g} provides numeric rounding. E.g. 314.1592653589793 to 314.159. Procedural programming style. snip_l2_10_a.py Get integer entry as radius. Use functions to calculate diameter, circumference and area of circle. Use iteration and output data each loop. snip_l2_10_b.py Get integer entry as radius. Use functions to calculate diameter, circumference and area of circle. Use iteration and output data each loop. Procedural programming style. snip_l2_11_a.py Get integer entry as radius. Calculate circumference, surface area and volume of sphere. Use iteration and output data each loop. Simple programming flow. snip_l2_11_b.py Get integer entry as radius. Use functions to calculate circumference, surface area and volume of sphere. Use iteration and output data each loop. Procedural programming style. snip_l2_12_a.py Get integer entry for cubic meters. Calculate radius, diameter, and circumference in meters, of sphere holding this volume. Use iteration and output data for each loop. Simple programming flow. snip_l2_12_b.py Get integer entry for cubic meters. Use functions to calculate radius, diameter, and circumference in meters, of sphere holding this volume. Use iteration and output data for each loop. Procedural programming style. snip_l2_13_a.py Get integer entry for litres. Calculate radius, diameter, and circumference in centimeters, of sphere holding this volume. Use iteration and output data for each loop. Simple programming flow. snip_l2_13_b.py Get integer entry for litres. Use functions to calculate radius, diameter, and circumference in centimeters, of sphere holding this volume. Requires multiplying the radius formula by 10 Use iteration and output data for each loop. Procedural programming style. snip_l2_14_a.py Get integer entry as radius. Calculate diameter, circumference and area of circle. Use iteration and output data each loop. Output the data to a .csv file, suitable for reading into a spreadsheet Simple programming flow. snip_l2_14_b.py Get integer entry as radius. Use functions to calculate diameter, circumference and area of circle. Use iteration and output data each loop. Generates the comma seperated value output file snip_l2_14_b.csv. Procedural programming style. snip_l2_14_c.py Get integer entry as radius. Use functions to calculate diameter, circumference and area of circle. Use iteration and output data each loop. Calls function to generates the comma seperated value output file snip_l2_14_c.csv. Procedural programming style. snip_l2_15_a.py Get integer entry as cube edge length. Calculate cube surface area, volume and the lenght of the internal diagonal. Use iteration and output data each loop. Output the data to a .csv file, suitable for reading into a spreadsheet snip_l2_15_b.py** Get integer entry as cube edge length. Use functions to calculate cube surface area, volume and the lenght of the internal diagonal. Use iteration and output data each loop. Output the data to a .csv file, suitable for reading into a spreadsheet. snip_l2_15_c.py Get integer entry as cube edge length. Use functions to calculate cube surface area, volume and the lenght of the internal diagonal. Use iteration and output data each loop. Output the data to a .csv file, suitable for reading into a spreadsheet. snip_l2_16_a.py Produce the Fibonacci series. Get integer for how many in the series to produce. As these are integers, they are accurately produced to infinite. snip_l2_16_b.py Produce the Fibonacci series. Get integer for how many in the series to produce. As these are integers, they are accurately produced to infinite. Enumerate the sequence and use commas in the numeric display. snip_l2_17_a.py Demonstration of large integers and integer operators. Multiplication *, Exponent **, Addition +, and Modulus % snip_l2_17_b.py Continuing demonstration of large integers and integer operators. Multiplication *, Exponent **, Addition + snip_l2_17_c.py Continuing demonstration of large integers and integer operators. Addition +, Subtraction -, and Exponent ** snip_l2_17_d.py Continuing demonstration of large integers and integer operators. Integer Division //, and Modulo % snip_l2_18_a.py Real scenario demonstration of large integers and integer operators. Addition +, Multiplicaton *, Integer Division //, Modulo % snip_l2_18_b.py Introduce the float type. Multiplying by a floating point decimal. Addition +, Multiplication * snip_l2_19_a.py Bicycle pedding cadence and sprocket ratios to determine speeds in each gear. Introduces list[] and for loop iterating over a list. Simple programming flow style. snip_l2_19_b.py Bicycle pedding cadence and sprocket ratios to determine speeds in each gear using functions. Introduces list[] and for loop iterating over a list. Written in procedural programming style snip_l2_20_a.py Floating point. Demonstration of adding 0.1 snip_l2_20_b.py Floating point. Demonstration of 1/10, while is equal to 0.1 in decimal is in binary 0.00011 and then infinately recurring 0011. snip_l2_20_c.py Floating point. Demonstration Max positve value of float. snip_l2_21_a.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime int(math.sqrt(integer_under_test)) snip_l2_21_b.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime int(math.sqrt(integer_under_test)) Provide statistics and better listing. snip_l2_21_c.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime int(math.sqrt(integer_under_test)) Provide heading and include count of number of modulo operations. Include the time taken to perform the calculations snip_l2_21_d.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime int(math.sqrt(integer_under_test)) Provide heading with number of primes located Include the time taken to perform the calculations Procedural programming style. snip_l2_21_e.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime int(math.sqrt(integer_under_test)) Provide heading with number of primes located. Include the time taken to perform the calculations. Include count of number of recursive modulo operations Procedural programming style. snip_l2_21_f.py Locate prime numbers. Use recursive division up to the square root of the integer being tested for being a prime. int(math.sqrt(integer_under_test)) Provide heading with number of primes located. Include the time taken to perform the calculations. Include count of number of recursive modulo operations Include Progress Bar Procedural programming style. snip_l2_22_a.py Based on the length of an edge of a tetrahedron provide the dimensions. Tetrahedron a = edge Volume = a^3/(6 sqrt(2) Area = sqrt(3) a^2 Face Area = (sqrt(3)/4) a^2 Height = sqrt(2/3) a snip_l2_23_a.py Demostrate ANSI escape sequences on a console. Including Microsoft Win10. By default, most Linux consoles support the ANSI escape sequences. Windows 10, since May 2016, supports a subset of ANSI escape sequences, for the CMD and Powershell console windows. On Windows this functionality is turned off by default. Enabling the ANSI escape sequences in Win10 can be performed by python: import ctypes kernel32 = ctypes.windll.kernel32 kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7) See notes section for links on ANSI escape sequences. snip_l2_23_b.py Demonstrate ANSI escape sequences for direct cursor addressing and setting forground and back ground colours on a console. Perform line drawing on a console using the box drawing character set. On Microsoft Windows console this is better than using the ANSI escape sequence box drawing as it is missing the ability to do the cross-hairs. Draw vertical bars of colour and indicates their numeric colour value. A draw_rectangle function has the arguments (x, y, width,height, foreground colour, background colour). Also sets the console windows title with ESC ] 2 ; <string> BEL snip_l2_23_c.py Demonstrate ANSI escape sequences for direct cursor addressing and setting forground and back ground colours on a console. Perform line drawing on a console using the box drawing character set. On Microsoft Windows console this is better than using the ANSI escape sequence box drawing as it is missing the ability to do the cross-hairs. Draw reducing sized rectangles in different colours. Use print(EscapeSequence, end=\"\", flush=True) to prevent newline character. Functions: draw_rectangle(), colour_check(), write_text() Also added COLOUR as a read-only dictionary to convert colour names to numeric string for the colour. If invalid colour data then remain with the default console colours. Sets the console windows title with ESC ] 2 ; <string> BEL snip_l2_23_d.py Demonstrate ANSI escape sequences for direct cursor addressing and setting forground and back ground colours on a console. Perform line drawing on a console using the box drawing character set. On Microsoft Windows console this is better than using the ANSI escape sequence box drawing as it is missing the ability to do the cross-hairs. Draw: Dummy form and Pizza Order form. Proceedural functions: main(), form_1(), pizza_form() Called functions() escape_sequence_check() - To check if Win10 is at the correct version draw_rectangle() draw_horizontal_line() draw_vertical_line() draw_intersection_line() colour_check() - Check if colour value is valid or translate text of colour to numeric value. write_text() - Direct cursor addressing of text strings snip_l2_23_e.py Demonstrate ANSI escape sequences for direct cursor addressing and setting forground and back ground colours on a console. Perform line drawing on a console using the box drawing character set. On Microsoft Windows console this is better than using the ANSI escape sequence box drawing as it is missing the ability to do the cross-hairs. Introduce write_field() function. Proceedural functions: main() Called functions() escape_sequence_check() - To check if Win10 is at the correct version draw_rectangle() draw_horizontal_line() draw_vertical_line() draw_intersection_line() colour_check() - Check if colour value is valid or translate text of colour to numeric value. write_text() - Direct cursor addressing of text strings write_field() - Includes length and alignment of text in the field snip_l2_24_a.py Review the character set to determine if it includes the box drawing set of characters. snip_l2_24_b.py Draw four styles of boxes from the Unicode Box Drawing set of characters. snip_l2_24_c.py Making use of Direct Cursor addressing, and colour. Line Drawing is part of the ASCII character set. Does not require ANSI escape sequences to perform the drawing. Supported on Windows 10 patched to May 2016 revision or later. Uses methods for each line drawing graphic character. Uses single line. Procedural functions: main(), setup_initial_screen(), get_continue(), get_first_name(), get_surname(), get_gender(), get_age(), get_fruit(), get_drink(), insert_time(), and generate_report(data_list). escape_sequence_check() - To check if Win10 is at the correct version. colour_check() - Check if colour value is valid or translate text of colour to numeric value. write_text() - Direct cursor addressing of text strings write_field() - Includes length and alignment of text in the field menu_selection() - Provide a sub-menu in the middle of the screen clear_area() - Clear the sub menu clear_line_23() - Line 23 is used for input get_integer() - Get integer value from user get_string() - Get string from user. Main methods for drawing boxes. These call the 11 x methods below draw_box(), draw_box_horizontal(), draw_box_vertical 11 x methods are included to be called by other methods for line drawing. Colour checking and turning on/off line drawing is not performed. draw_horizontal(), draw_vertical() draw_top_left(), draw_top_right(), draw_bottom_left(), draw_bottom_right() draw_top_t(), draw_bottom_t(), draw_left_t(), draw_right_t() draw_intersection() snip_l2_24_d.py Making use of Direct Cursor addressing, and colour. Line Drawing is part of the ASCII character set. Does not require ANSI escape sequences to perform the drawing. Supported on Windows 10 patched to May 2016 revision or later. Uses methods for each line drawing graphic character. Uses double lines. Procedural functions: main(), setup_initial_screen(), get_continue(), get_first_name(), get_surname(), get_gender(), get_age(), get_fruit(), get_drink(), insert_time(), and generate_report(data_list). escape_sequence_check() - To check if Win10 is at the correct version. colour_check() - Check if colour value is valid or translate text of colour to numeric value. write_text() - Direct cursor addressing of text strings write_field() - Includes length and alignment of text in the field menu_selection() - Provide a sub-menu in the middle of the screen clear_area() - Clear the sub menu clear_line_23() - Line 23 is used for input get_integer() - Get integer value from user get_string() - Get string from user. Main methods for drawing boxes. These call the 11 x methods below draw_box(), draw_box_horizontal(), draw_box_vertical 11 x methods are included to be called by other methods for line drawing. Colour checking and turning on/off line drawing is not performed. draw_horizontal(), draw_vertical() draw_top_left(), draw_top_right(), draw_bottom_left(), draw_bottom_right() draw_top_t(), draw_bottom_t(), draw_left_t(), draw_right_t() draw_intersection()","title":"Code Snippets for Python - Level 2"},{"location":"ncea_level2/templates/","text":"Code Templates in Python - Level 2 Links: Github or Website These code templates may be useful for anyone who is learning the Python programming language. The templates use the procedural programming style. These templates are numbered and they are associated with the same numbered programs in the snippets folder . The top and bottom of these template programs remains much the same for each program. At the top of each program the template provides: shebang, importing modules, program description, copywrite, defining constants and variables. At the bottom of each program the template provides: if __name__ == '__main__': , help information function, python version check function, log file append function, command line argument parsing including debugging and help flags, and calls the main() function. The middle section of these template programs is what changes to give each program its unique features. It contains a main() function which includes calls to other functions. These template programs highlight the use of function code blocks, but do not utilise classes. They also assume the program is written as one file, and importing of modules is restricted to a small set of the builtin python modules. The programs are all console terminal based and there is no use of GUI windowing. These templates were developed using Python 3.4. They have been tested on Ubuntu Linux and Windows10 desktop environments. New Zealand secondary school teachers and students may find these template useful for the Digital Technologies, Level 2, Achievement Standards 91372 and 91373 . In a classroom computer lab that uses Windows10 desktop computers, the console terminal window applications (CMD and Powershell) may have been made unavailable on the students desktop computers. In the Windows10 file manager, if a python file is double-clicked it will launch a terminal window to run the python program. When the program completes, this terminal window is closed. To prevent the programs closing before a student has been able to see what the program does, all these snippet programs end with the lines... input(\"Press Enter key to end the program.\") sys.exit() Ian Stewart - 2016 \u00a9 Template Programs template_l2_01.py - Fundament_Components Python program. Fundamental programming style components. Includes: Shebang, encoding, Commented text in help(), Importing modules, variables, constants, python2 check, main function, cli help(), if __name__ == '__main__': , cli sys.argv list, debug, call main() template_l2_02.py - Time-Stamped_Logging Python program using a procedural programming style. Add Logging of time-stamped data template_l2_03.py - Check_Python_Min_Version Python program using a procedural programming style. Add: Check python is above the minimum version. template_l2_04.py - Functions Python program using a procedural programming style. Add: 2 x functions. Includes data-type testing and +=1 Data can be passed as a command line option. template_l2_05.py - Input_From_Console Python program using a procedural programming style... Get integer or floating point value from console. template_l2_06.py - Input_Integer_From_Console Python program using a procedural programming style... Add: Integer only data from console. template_l2_07.py - Circle_Calculator When provided with the a value for the radius, the circle calculator program will determine the circles circumference and area. template_l2_08.py - Sphere_Calculator When provided with the a value for the radius, the sphere calculator program will determine the spheres surface area and volume. template_l2_09.py - Cube_Calculator When provided with the length of the edge of a cube calculator program will determine the cubes surface area, volume, and space diagonal. template_l2_10.py - Circle_Plotter When provided with a range of integer values for a radius the circle plotter program will determine the diameter, circumference and area. The output may be cut and pasted into a spreadsheet. If so, space delimiters must be merged. template_l2_11.py - Sphere_Plotter When provided with a range of integer values for a radius the sphere plotter program will determine the circumference, surface area and volume. The output may be cut and pasted into a spreadsheet. If so, space delimiters must be merged. template_l2_12.py - Sphere_Volume_Plotter When provided with a range of integer values for the cubic meter volume of a sphere, the sphere volume plotter program will determine the radius, diameter and circumference of the sphere in meters. The output may be cut and pasted into a spreadsheet. If so, space delimiters must be merged. template_l2_13.py - Sphere_Litre_Plotter When provided with a range of integer values for the litres a sphere will hold, the sphere litre plotter program will determine the radius, diameter and circumference of the sphere in centimeters. The output may be cut and pasted into a spreadsheet. If so, space delimiters must be merged. template_l2_14.py - Circle_Plotter_CSV When provided with a range of integer values for a radius the circle plotter program will determine the diameter, circumference and area. Like template_l2_10.py The data is output to a comma seperated values (.csv) file. template_l2_15.py - Cube_Plotter_CSV When provided with the length of the edge of a cube calculator program will determine the cubes surface area, volume, and space diagonal. Similar to template_l2_09.py The data is output to a comma seperated values (.csv) file The function update_data() is called from main(). template_l2_16.py - Fibonacci_sequence Generate the Fibonacci sequence of integers. The total for the sequence may be selected. As each Fibonacci number in the sequence is generated it is appended to a list. The items in the list are then output to the console. The sequence has been limited to 200 so they are easier to read on the console. Highlights there is no limit to python integer arithmetic template_l2_17.py - Integer_Fun Demonstrate the arithmetic performed on integers is accurate and has no limits. Starting with a funny number it is manipulated with multiplication ( ), addition (+) and exponents ( *) to create an integer that is comprised of only one's. Also highlights use of the modulo operator (%) and pythons integer division (//), which is floor division. template_l2_18.py - Integer_Distance Demonstrate the arithmetic performed on integers is accurate and has no limits. Introduce floating point calculation. template_l2_19.py - Bike_Speed Determine the speed of a bicycle. Parameters that may be adjusted are: 1. Diameter of the rear wheel. 2. Cadence. The revolutions per minute of the pedalling. 3. Crankset teeth. Number of teeth on the front sprocket. A list provides the number of teeth on each sprocket of the casette on the rear wheel. Input values are Integers. Calculations are mostly floats. template_l2_20.py - Floating_Point Demonstrate floating-point arithmetic and highlight some of its issues and limitations.","title":"Code Templates in Python - Level 2"},{"location":"ncea_level2/templates/#code-templates-in-python-level-2","text":"Links: Github or Website These code templates may be useful for anyone who is learning the Python programming language. The templates use the procedural programming style. These templates are numbered and they are associated with the same numbered programs in the snippets folder . The top and bottom of these template programs remains much the same for each program. At the top of each program the template provides: shebang, importing modules, program description, copywrite, defining constants and variables. At the bottom of each program the template provides: if __name__ == '__main__': , help information function, python version check function, log file append function, command line argument parsing including debugging and help flags, and calls the main() function. The middle section of these template programs is what changes to give each program its unique features. It contains a main() function which includes calls to other functions. These template programs highlight the use of function code blocks, but do not utilise classes. They also assume the program is written as one file, and importing of modules is restricted to a small set of the builtin python modules. The programs are all console terminal based and there is no use of GUI windowing. These templates were developed using Python 3.4. They have been tested on Ubuntu Linux and Windows10 desktop environments. New Zealand secondary school teachers and students may find these template useful for the Digital Technologies, Level 2, Achievement Standards 91372 and 91373 . In a classroom computer lab that uses Windows10 desktop computers, the console terminal window applications (CMD and Powershell) may have been made unavailable on the students desktop computers. In the Windows10 file manager, if a python file is double-clicked it will launch a terminal window to run the python program. When the program completes, this terminal window is closed. To prevent the programs closing before a student has been able to see what the program does, all these snippet programs end with the lines... input(\"Press Enter key to end the program.\") sys.exit() Ian Stewart - 2016 \u00a9","title":"Code Templates in Python - Level 2"},{"location":"ncea_level2/templates/#template-programs","text":"template_l2_01.py - Fundament_Components Python program. Fundamental programming style components. Includes: Shebang, encoding, Commented text in help(), Importing modules, variables, constants, python2 check, main function, cli help(), if __name__ == '__main__': , cli sys.argv list, debug, call main() template_l2_02.py - Time-Stamped_Logging Python program using a procedural programming style. Add Logging of time-stamped data template_l2_03.py - Check_Python_Min_Version Python program using a procedural programming style. Add: Check python is above the minimum version. template_l2_04.py - Functions Python program using a procedural programming style. Add: 2 x functions. Includes data-type testing and +=1 Data can be passed as a command line option. template_l2_05.py - Input_From_Console Python program using a procedural programming style... Get integer or floating point value from console. template_l2_06.py - Input_Integer_From_Console Python program using a procedural programming style... Add: Integer only data from console. template_l2_07.py - Circle_Calculator When provided with the a value for the radius, the circle calculator program will determine the circles circumference and area. template_l2_08.py - Sphere_Calculator When provided with the a value for the radius, the sphere calculator program will determine the spheres surface area and volume. template_l2_09.py - Cube_Calculator When provided with the length of the edge of a cube calculator program will determine the cubes surface area, volume, and space diagonal. template_l2_10.py - Circle_Plotter When provided with a range of integer values for a radius the circle plotter program will determine the diameter, circumference and area. The output may be cut and pasted into a spreadsheet. If so, space delimiters must be merged. template_l2_11.py - Sphere_Plotter When provided with a range of integer values for a radius the sphere plotter program will determine the circumference, surface area and volume. The output may be cut and pasted into a spreadsheet. If so, space delimiters must be merged. template_l2_12.py - Sphere_Volume_Plotter When provided with a range of integer values for the cubic meter volume of a sphere, the sphere volume plotter program will determine the radius, diameter and circumference of the sphere in meters. The output may be cut and pasted into a spreadsheet. If so, space delimiters must be merged. template_l2_13.py - Sphere_Litre_Plotter When provided with a range of integer values for the litres a sphere will hold, the sphere litre plotter program will determine the radius, diameter and circumference of the sphere in centimeters. The output may be cut and pasted into a spreadsheet. If so, space delimiters must be merged. template_l2_14.py - Circle_Plotter_CSV When provided with a range of integer values for a radius the circle plotter program will determine the diameter, circumference and area. Like template_l2_10.py The data is output to a comma seperated values (.csv) file. template_l2_15.py - Cube_Plotter_CSV When provided with the length of the edge of a cube calculator program will determine the cubes surface area, volume, and space diagonal. Similar to template_l2_09.py The data is output to a comma seperated values (.csv) file The function update_data() is called from main(). template_l2_16.py - Fibonacci_sequence Generate the Fibonacci sequence of integers. The total for the sequence may be selected. As each Fibonacci number in the sequence is generated it is appended to a list. The items in the list are then output to the console. The sequence has been limited to 200 so they are easier to read on the console. Highlights there is no limit to python integer arithmetic template_l2_17.py - Integer_Fun Demonstrate the arithmetic performed on integers is accurate and has no limits. Starting with a funny number it is manipulated with multiplication ( ), addition (+) and exponents ( *) to create an integer that is comprised of only one's. Also highlights use of the modulo operator (%) and pythons integer division (//), which is floor division. template_l2_18.py - Integer_Distance Demonstrate the arithmetic performed on integers is accurate and has no limits. Introduce floating point calculation. template_l2_19.py - Bike_Speed Determine the speed of a bicycle. Parameters that may be adjusted are: 1. Diameter of the rear wheel. 2. Cadence. The revolutions per minute of the pedalling. 3. Crankset teeth. Number of teeth on the front sprocket. A list provides the number of teeth on each sprocket of the casette on the rear wheel. Input values are Integers. Calculations are mostly floats. template_l2_20.py - Floating_Point Demonstrate floating-point arithmetic and highlight some of its issues and limitations.","title":"Template Programs"},{"location":"prime_number_locator/","text":"Prime Number Locator Links: Github or Website Introduction This program will locate prime numbers by searching through a range of numbers in which the user may provide the start integer and select from a list the range of numbers to search. The algorithm used to determe if an integer is a prime is also selectable. Four algorithms are provided. Some algorithms are more efficient than others and as the program executes the elapsed time and a progress bar are displayed as a way of measuring the efficiency of the selected algorithm. The menu bar contains a Help feature which opens another window and displays information in a scrolled text widget. A button provides for selecting either one of four text files of information to be displayed. As well as the main base module of tkinter for python3, four other modules from the tkinter package are used. These are themed tkinter (ttk), scrolledtext, messagebox and filedialog. Setting the font type and font size make use of the style capabilities of themed tkinter. The geometry manager used is the grid method. The program requires its four text files to reside in the same folder as the program in order to provide the help and other information. Files prime_number_locator.py prime_number_locator_flow.txt prime_number_locator_help.txt prime_number_locator_reference.txt prime_number_locator_specification.txt New Zealand - NCEA The New Zealand secondary school curriculum includes the subject Digital Technologies. This program is designed to meet the specification of the NCEA Level3 Digital Technologies Unit 91637 titled \"Develop a complex computer program for a specified task\". Launch the program and select Help from the menu bar, then select the specification information for the NCEA details. Ian Stewart - 2016 April This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Prime Number Locator"},{"location":"prime_number_locator/#prime-number-locator","text":"Links: Github or Website","title":"Prime Number Locator"},{"location":"prime_number_locator/#introduction","text":"This program will locate prime numbers by searching through a range of numbers in which the user may provide the start integer and select from a list the range of numbers to search. The algorithm used to determe if an integer is a prime is also selectable. Four algorithms are provided. Some algorithms are more efficient than others and as the program executes the elapsed time and a progress bar are displayed as a way of measuring the efficiency of the selected algorithm. The menu bar contains a Help feature which opens another window and displays information in a scrolled text widget. A button provides for selecting either one of four text files of information to be displayed. As well as the main base module of tkinter for python3, four other modules from the tkinter package are used. These are themed tkinter (ttk), scrolledtext, messagebox and filedialog. Setting the font type and font size make use of the style capabilities of themed tkinter. The geometry manager used is the grid method. The program requires its four text files to reside in the same folder as the program in order to provide the help and other information.","title":"Introduction"},{"location":"prime_number_locator/#files","text":"prime_number_locator.py prime_number_locator_flow.txt prime_number_locator_help.txt prime_number_locator_reference.txt prime_number_locator_specification.txt","title":"Files"},{"location":"prime_number_locator/#new-zealand-ncea","text":"The New Zealand secondary school curriculum includes the subject Digital Technologies. This program is designed to meet the specification of the NCEA Level3 Digital Technologies Unit 91637 titled \"Develop a complex computer program for a specified task\". Launch the program and select Help from the menu bar, then select the specification information for the NCEA details. Ian Stewart - 2016 April This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"New Zealand - NCEA"},{"location":"procedural_programming/","text":"Procedural Programming. Links: Github or Website Command Line Programming Steps. A python program may be written as a sequential set of statements, but this may become complex to enhance and debug. To help overcome these issues it may be converted to use a procedural programming paradigm . The four programs prog_step_1.py through prog_step_4.py demonstate the steps in converting a program to using the procedural style: prog_step_1.py A python3 set of statements. Execution flows from line 1 to the last line. Uses argparse command line interface module. prog_step_2.py Convert to a procedural programming style. prog_step_3.py Change the program to retrieve a radius and calculate a circle circumference and area using seperate functions. prog_step_4.py Argparse enables radius to be entered at the command line and become the radius prompt value. This may be suitable as a template for developing a procedural program. Gtk+ Programming Steps. The Python GObject Introspection respository provides the python language bindings for the Gimp Toolkit (Gtk+) which is written in C. The following programs demonstate the steps in writing a Python GUI program using Gtk+: gtk_step_1.py Create an empty window, with a title. Clicking on the X icon will close the window and halt the program. gtk_step_2.py Default Window size. Create main grid and add three frames. gtk_step_3.py Add a grid to each frame. Add a label to each frame. gtk_step_4.py Add an Entry widget in frame 1. gtk_step_5.py Import math. Calculate the circumference and the area based on Entry data. gtk_step_6.py Setup the labelling. gtk_step_7.py Use argpase to pass the radius via the command line. For example: $ python3 gtk_step_7.py --radius 12.5 gtk_step_4_insert.py Additional example. In the above programs no, on-the-fly, checking is performed to determine and assist in the entering of an integer or floating point value in the Entry field. This program is included to demonstrate using the \"insert_text\" callback. This allows testing and filtering of the new text being entered to ensure that valid syntax for the float data type is adhered to. Ian Stewart. August 2017. Hamilton Python User Group. To the extent possible under law, the person who associated CC0 with this work has waived all copyright and related or neighboring rights to this work.","title":"Procedural Programming."},{"location":"procedural_programming/#procedural-programming","text":"Links: Github or Website","title":"Procedural Programming."},{"location":"procedural_programming/#command-line-programming-steps","text":"A python program may be written as a sequential set of statements, but this may become complex to enhance and debug. To help overcome these issues it may be converted to use a procedural programming paradigm . The four programs prog_step_1.py through prog_step_4.py demonstate the steps in converting a program to using the procedural style: prog_step_1.py A python3 set of statements. Execution flows from line 1 to the last line. Uses argparse command line interface module. prog_step_2.py Convert to a procedural programming style. prog_step_3.py Change the program to retrieve a radius and calculate a circle circumference and area using seperate functions. prog_step_4.py Argparse enables radius to be entered at the command line and become the radius prompt value. This may be suitable as a template for developing a procedural program.","title":"Command Line Programming Steps."},{"location":"procedural_programming/#gtk-programming-steps","text":"The Python GObject Introspection respository provides the python language bindings for the Gimp Toolkit (Gtk+) which is written in C. The following programs demonstate the steps in writing a Python GUI program using Gtk+: gtk_step_1.py Create an empty window, with a title. Clicking on the X icon will close the window and halt the program. gtk_step_2.py Default Window size. Create main grid and add three frames. gtk_step_3.py Add a grid to each frame. Add a label to each frame. gtk_step_4.py Add an Entry widget in frame 1. gtk_step_5.py Import math. Calculate the circumference and the area based on Entry data. gtk_step_6.py Setup the labelling. gtk_step_7.py Use argpase to pass the radius via the command line. For example: $ python3 gtk_step_7.py --radius 12.5 gtk_step_4_insert.py Additional example. In the above programs no, on-the-fly, checking is performed to determine and assist in the entering of an integer or floating point value in the Entry field. This program is included to demonstrate using the \"insert_text\" callback. This allows testing and filtering of the new text being entered to ensure that valid syntax for the float data type is adhered to. Ian Stewart. August 2017. Hamilton Python User Group. To the extent possible under law, the person who associated CC0 with this work has waived all copyright and related or neighboring rights to this work.","title":"Gtk+ Programming Steps."},{"location":"simple_calculator/","text":"Simple Calculator Links: Github or Website Introduction This python3 program, using the tkinter GUI, provides a four function calculator. The approach taken is to have the entry of the numeric keypad data stored as a string. The module decimal is then employed to convert the string data to decimal floating point when performing a calculation. With pythons builtin binary floating point, numbers like 1.1 and 2.2 do not have exact representations. The result of adding 1.1 and 2.2 is as follows >>> a = 1.1 + 2.2 >>> type(a) <class 'float'> >>> print(a) 3.3000000000000003 Using the Decimal module the addition is as follows >>> from decimal import * >>> b = Decimal(\"1.1\") + Decimal(\"2.2\") >>> type(b) <class 'decimal.Decimal'> >>> print(b) 3.3 The calculator contains a two line display. The top line is the equation the bottom line, once the equals key is clicked, is the result. The menu bar has File --> Output Calculations. This will output a calculation to the console window. With division, if the divisor is zero, execution is blocked to prevent attempting a division by zero. In clicking on the equals key the calculation is not attempted and an error message is sent to the console terminal. If the next key clicked on after a division by zero attempt is numeric the calculator responds as if a clear had been pressed and it is a new equation being entered. Files simple_calculator.py New Zealand - NCEA. The New Zealand secondary school curriculum includes the subject Digital Technologies. This program may serve as an introductory guide for writing a program to meet the specifications of the NCEA Level3 Digital Technologies Unit 91637 titled \"Develop a complex computer program for a specified task\". Ian Stewart - 2016 April This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Simple Calculator"},{"location":"simple_calculator/#simple-calculator","text":"Links: Github or Website","title":"Simple Calculator"},{"location":"simple_calculator/#introduction","text":"This python3 program, using the tkinter GUI, provides a four function calculator. The approach taken is to have the entry of the numeric keypad data stored as a string. The module decimal is then employed to convert the string data to decimal floating point when performing a calculation. With pythons builtin binary floating point, numbers like 1.1 and 2.2 do not have exact representations. The result of adding 1.1 and 2.2 is as follows >>> a = 1.1 + 2.2 >>> type(a) <class 'float'> >>> print(a) 3.3000000000000003 Using the Decimal module the addition is as follows >>> from decimal import * >>> b = Decimal(\"1.1\") + Decimal(\"2.2\") >>> type(b) <class 'decimal.Decimal'> >>> print(b) 3.3 The calculator contains a two line display. The top line is the equation the bottom line, once the equals key is clicked, is the result. The menu bar has File --> Output Calculations. This will output a calculation to the console window. With division, if the divisor is zero, execution is blocked to prevent attempting a division by zero. In clicking on the equals key the calculation is not attempted and an error message is sent to the console terminal. If the next key clicked on after a division by zero attempt is numeric the calculator responds as if a clear had been pressed and it is a new equation being entered.","title":"Introduction"},{"location":"simple_calculator/#files","text":"simple_calculator.py","title":"Files"},{"location":"simple_calculator/#new-zealand-ncea","text":"The New Zealand secondary school curriculum includes the subject Digital Technologies. This program may serve as an introductory guide for writing a program to meet the specifications of the NCEA Level3 Digital Technologies Unit 91637 titled \"Develop a complex computer program for a specified task\". Ian Stewart - 2016 April This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"New Zealand - NCEA."},{"location":"tkinter_introduction/","text":"Tkinter - Python Interface for the Widget Toolkit library Tk. Links: Github or Website Introduction to using tkinter. Wikipedia: https://en.wikipedia.org/wiki/Tk_(software) Initially released in 1991 this widget toolkit provides the elements for building graphical user interface applications. The Tk library and the python module tkinter are normally included with a python installation. The quick check to test if your computer has tkinter is to run python and enter... >>> import tkinter >>> dir(tkinter) If tkinter is not installed, then, depending on your platform, proceed with installing it. For example on a Debian Linux based system: $ sudo apt-get install python3-tk Typing the following will launch a GUI window... >>> tkinter.Tk() While there are many choices of widget toolkits for GUI programming in python , as tkinter is traditionally bundled with python, then it is recommended as the toolkit to initially use to familiarise yourself with GUI programming. For reference material on programming tkinter: Graphical User Interfaces with Tk at Python.org. Tkinter 8.5 reference: a GUI for Python by John W. Shipman - New Mexico Tech. The following are programs designed to help with understanding and being able to write your first GUI programs in python/tkinter. 01_tkinter_a.py through _h.py These 9 programs are to demonstrate creating a Tk window. These programs should be run by python from a console window, and also by double-clicking the file name to auto-launch the program so any differences in behaviour may be observed. The programs demonstrate using delay mechanisms to keep displaying the window and introduce the mainloop() function. They also demonstrate adding a title, changing the background colour, changing the geometry, etc. 02_tkinter_no_class_a.py This program does not use the class construct to display a window. As the label and buttons are not instantiated they can not be accessed globally. It is therefore necessary to loop through the widgets in the mainframe until a name match locates the label and its text can then be changed. 02_tkinter_no_class_b.py This program does not use the class construct to display a window. The Tk toolkits string variable feature is used, which in turn is associated to the textvariable attribute of the label. The buttons may then change the text in the label by setting the contents of the string variable. 03_tkinter_class.py This program uses a class construct. Within the class are the callback methods for buttons to change the text on the label. The New Zealand secondary school curriculum contains the subject Digital Technologies. For NCEA Level 3 this contains unit 91637 which requires a student to Develop a complex computer program for a specified task. A requirement is to use a class construct. This program may be suitable as a template for writing a program that meets this set of NCEA specifications. Ian Stewart - 2016 July","title":"Tkinter - Python Interface for the Widget Toolkit library Tk."},{"location":"tkinter_introduction/#tkinter-python-interface-for-the-widget-toolkit-library-tk","text":"Links: Github or Website","title":"Tkinter - Python Interface for the Widget Toolkit library Tk."},{"location":"tkinter_introduction/#introduction-to-using-tkinter","text":"Wikipedia: https://en.wikipedia.org/wiki/Tk_(software) Initially released in 1991 this widget toolkit provides the elements for building graphical user interface applications. The Tk library and the python module tkinter are normally included with a python installation. The quick check to test if your computer has tkinter is to run python and enter... >>> import tkinter >>> dir(tkinter) If tkinter is not installed, then, depending on your platform, proceed with installing it. For example on a Debian Linux based system: $ sudo apt-get install python3-tk Typing the following will launch a GUI window... >>> tkinter.Tk() While there are many choices of widget toolkits for GUI programming in python , as tkinter is traditionally bundled with python, then it is recommended as the toolkit to initially use to familiarise yourself with GUI programming. For reference material on programming tkinter: Graphical User Interfaces with Tk at Python.org. Tkinter 8.5 reference: a GUI for Python by John W. Shipman - New Mexico Tech. The following are programs designed to help with understanding and being able to write your first GUI programs in python/tkinter. 01_tkinter_a.py through _h.py These 9 programs are to demonstrate creating a Tk window. These programs should be run by python from a console window, and also by double-clicking the file name to auto-launch the program so any differences in behaviour may be observed. The programs demonstrate using delay mechanisms to keep displaying the window and introduce the mainloop() function. They also demonstrate adding a title, changing the background colour, changing the geometry, etc. 02_tkinter_no_class_a.py This program does not use the class construct to display a window. As the label and buttons are not instantiated they can not be accessed globally. It is therefore necessary to loop through the widgets in the mainframe until a name match locates the label and its text can then be changed. 02_tkinter_no_class_b.py This program does not use the class construct to display a window. The Tk toolkits string variable feature is used, which in turn is associated to the textvariable attribute of the label. The buttons may then change the text in the label by setting the contents of the string variable. 03_tkinter_class.py This program uses a class construct. Within the class are the callback methods for buttons to change the text on the label. The New Zealand secondary school curriculum contains the subject Digital Technologies. For NCEA Level 3 this contains unit 91637 which requires a student to Develop a complex computer program for a specified task. A requirement is to use a class construct. This program may be suitable as a template for writing a program that meets this set of NCEA specifications. Ian Stewart - 2016 July","title":"Introduction to using tkinter."},{"location":"windows_extensions/","text":"Launching Python on Windows Links: Github or Website The .py and .pyw extensions On the Windows platform python scripts may be saved with either .py or .pyw extensions. Double-clicking on a python file will load the file and python will commence executing the script. If the extension is .py a console window is opened and the python script executes within this window. Once the script completes the console window is closed. So that any output to the console window may be observed before the window closes, then a delay needs to be added to the program to prevent its immediate termination. For example, at the end of the python script add... input(\"Hit Return key to exit program\") If the python script produces a GUI window (e.g. uses tkinter), then save the script with a .pyw extension. When this launches no console window will be opened. Only the GUI window will be displayed. This window will remain open until terminated with a mouse click to close the window. While developing a GUI script, it may be helpful to have debugging information sent to a console window. If the GUI program under development is given a .py extension, then a console window is also provided when the program is launched and the GUI window is displayed. This console window will display output from a print() function. The following programs are included to highlight these features when double-clicking to launch the programs on a Windows platform. 01_fibonacci.py Launches console window, executes and closes window. This happens too quickly to be able to view the fibonacci series of numbers that are generated. 02_fibonacci_pause.py Launches console window, executes and then pauses, waiting for Return key to be hit before it closes. 03_fibonacci_tkinter.pyw Launches a tkinter GUI window. Clicking on a button generates and displays the fibonacci series in a label. 04_fibonacci_tkinter.py Launches the tkinter GUI window and a console terminal window. Clicking on a button displays the fibonacci series in a label, plus the print() function issues debugging information which is sent to the console terminal window. The launchers are located in C:\\Windows\\ as the applications py.exe and pyw.exe . For more information on Python Launcher for Windows, see PEP 397 . Author: Ian Stewart. Date: 2016 July Scripts are licensed CC0 https://creativecommons.org/publicdomain/zero/1.0/","title":"Launching Python on Windows"},{"location":"windows_extensions/#launching-python-on-windows","text":"Links: Github or Website","title":"Launching Python on Windows"},{"location":"windows_extensions/#the-py-and-pyw-extensions","text":"On the Windows platform python scripts may be saved with either .py or .pyw extensions. Double-clicking on a python file will load the file and python will commence executing the script. If the extension is .py a console window is opened and the python script executes within this window. Once the script completes the console window is closed. So that any output to the console window may be observed before the window closes, then a delay needs to be added to the program to prevent its immediate termination. For example, at the end of the python script add... input(\"Hit Return key to exit program\") If the python script produces a GUI window (e.g. uses tkinter), then save the script with a .pyw extension. When this launches no console window will be opened. Only the GUI window will be displayed. This window will remain open until terminated with a mouse click to close the window. While developing a GUI script, it may be helpful to have debugging information sent to a console window. If the GUI program under development is given a .py extension, then a console window is also provided when the program is launched and the GUI window is displayed. This console window will display output from a print() function. The following programs are included to highlight these features when double-clicking to launch the programs on a Windows platform. 01_fibonacci.py Launches console window, executes and closes window. This happens too quickly to be able to view the fibonacci series of numbers that are generated. 02_fibonacci_pause.py Launches console window, executes and then pauses, waiting for Return key to be hit before it closes. 03_fibonacci_tkinter.pyw Launches a tkinter GUI window. Clicking on a button generates and displays the fibonacci series in a label. 04_fibonacci_tkinter.py Launches the tkinter GUI window and a console terminal window. Clicking on a button displays the fibonacci series in a label, plus the print() function issues debugging information which is sent to the console terminal window. The launchers are located in C:\\Windows\\ as the applications py.exe and pyw.exe . For more information on Python Launcher for Windows, see PEP 397 . Author: Ian Stewart. Date: 2016 July Scripts are licensed CC0 https://creativecommons.org/publicdomain/zero/1.0/","title":"The .py and .pyw extensions"}]}